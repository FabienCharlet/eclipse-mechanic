# @title Auto insert templates
# @description Add lots of useful templates which will be automatically inserted
# @task_type LASTMOD
#
# Created by the Workspace Mechanic Preference Recorder
#Fri Aug 29 14:56:17 CEST 2014
file_export_version=3.0
/instance/org.eclipse.jdt.ui/org.eclipse.jdt.ui.text.templates_migrated=true
/instance/org.eclipse.jdt.ui/org.eclipse.jdt.ui.text.custom_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates><template autoinsert\="false" context\="java-statements" deleted\="false" description\="try catch block" enabled\="true" id\="org.eclipse.jdt.ui.templates.try" name\="try_catch">try {\r\n\t${line_selection}${cursor}\r\n} catch (${Exception} ${exception_variable_name}) {\r\n\tthrow new RuntimeException("Error not handled", ${exception_variable_name});\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="iterate over an array or Iterable" enabled\="true" name\="forz">for (${iterable_type} ${iterable_element} \: ${iterable}) {\r\n\t${cursor}\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="iterate over an array or Iterable" enabled\="true" name\="ifz">if (${condition\:var(boolean)}) {\r\n\t${line_selection}${cursor}\r\n}</template><template autoinsert\="true" context\="java-statements" deleted\="false" description\="iterate over an array or Iterable" enabled\="true" name\="not_null_check">if( ${var} \!\= null ) {\r\n\t${line_selection}${cursor}\r\n}</template><template autoinsert\="true" context\="java" deleted\="false" description\="ArrayList declaration" enabled\="true" name\="listz">${\:import(java.util.List, java.util.ArrayList)}List&lt;${type}&gt; ${name\:newName(java.util.List)} \= new ArrayList&lt;&gt;();</template><template autoinsert\="true" context\="java" deleted\="false" description\="HashMap declaration" enabled\="true" name\="mapz">${\:import(java.util.Map, java.util.HashMap)}Map&lt;${keyType}, ${valueType}&gt; ${name\:newName(java.util.Map)} \= new HashMap&lt;&gt;();</template><template autoinsert\="true" context\="java" deleted\="false" description\="HashSet declaration" enabled\="true" name\="setz">${\:import(java.util.Set, java.util.HashSet)}Set&lt;${type}&gt; ${name\:newName(java.util.Set)} \= new HashSet&lt;&gt;();</template><template autoinsert\="true" context\="java" deleted\="false" description\="Array declaration and initialisation" enabled\="true" name\="initarray">${type}[] ${name} \= new ${type}[] {${cursor}};</template><template autoinsert\="true" context\="java" deleted\="false" description\="Declare a list and initialise it using asList()" enabled\="true" name\="initlist">List&lt;${type}&gt; ${name\:newName(java.util.List)} \= Arrays.asList(${cursor});${\:import(java.util.List, java.util.Arrays)}</template><template autoinsert\="true" context\="java" deleted\="false" description\="Create a slf4j logger" enabled\="true" name\="loggerz">private static final Logger LOGGER \= LoggerFactory.getLogger(${enclosing_type}.class);${\:import(org.slf4j.Logger, org.slf4j.LoggerFactory, org.slf4j.Logger, org.slf4j.Logger)}</template><template autoinsert\="true" context\="java" deleted\="false" description\="Create a calendar" enabled\="true" name\="calz">Calendar ${name\:newName(java.util.Calendar)} \= Calendar.getInstance();${\:import(java.util.Calendar)}</template></templates>